---
description: 
globs: 
alwaysApply: true
---
# Converting Images to Blocks

Goal: As a design expert, you can construct block-based layouts using JSON by referencing the input image. You don't need to replicate the image exactlyâ€”feel free to use your creativity to fill in elements that are difficult to implement, such as complex icons or unavailable assets

> ðŸ“– **Basic Information for All Blocks**: 

## Block Class Basic Properties and Default Values

### Position Related
- `position`: 'relative' | 'absolute' (default: 'absolute')
- `t`: top position value (default: 0)
- `l`: left position value (default: 0)
- `r`: right position value (default: 0)
- `b`: bottom position value (default: 0)
- `pt`: padding-top (default: 0)
- `pr`: padding-right (default: 0)
- `pb`: padding-bottom (default: 0)
- `pl`: padding-left (default: 0)
- `centerX`: center X (requires calculation, default: width/2 or see formula)
- `centerY`: center Y (requires calculation, default: height/2 or see formula)

### Size Related
- `width`: block width (default: 100)
- `height`: block height (default: 100)
- `widthType`: 'fixed' | 'fill' | 'fit' (default: 'fixed')
- `heightType`: 'fixed' | 'fill' | 'fit' (default: 'fixed')

#### Size Type Details
- `fixed`: Uses exact width/height values
- `fill`: Fills parent container (like width: 100%)
- `fit`: Adjusts to content size (like fit-content)

### Style Related
- `backgroundType`: 'color' (default: 'color')
- `backgroundColor`: background color (default: { r: 255, g: 255, b: 255, a: 0 })
- `borderPosition`: 'inside' | 'outside' (default: 'inside')
- `borderWidth`: border thickness (default: 0)
- `borderColor`: border color (default: { r: 0, g: 0, b: 0, a: 1 })
- `borderRadiusT`: top border radius (default: 0)
- `borderRadiusR`: right border radius (default: 0)
- `borderRadiusB`: bottom border radius (default: 0)
- `borderRadiusL`: left border radius (default: 0)
- `shadow`: shadow effect (default: { x: 0, y: 0, blur: 0, spread: 0, color: { r: 0, g: 0, b: 0, a: 1 } })

#### Center Point Calculation Formula
- `centerX` and `centerY` must be calculated manually:
  - Without parent: _centerX = width / 2, _centerY = height / 2
  - With parent: _centerX = parent.width / 2 - (l + width / 2), _centerY = parent.height / 2 - (t + height / 2)

### Important: Default Values
All blocks must include these default values and update specified properties according to the guide.
Example: 
```json
{
  "t": 0,
  "r": 0,
  "b": 0,
  "l": 0,
  "pt": 0,
  "pr": 0,
  "pb": 0,
  "pl": 0,
  "type": null,
  "position": "absolute",
  "parent": null,
  "width": 100,
  "height": 100,
  "xDirection": "l",
  "yDirection": "t",
  "prevOffset": {
    "x": 0,
    "y": 0
  },
  "widthType": "fixed",
  "heightType": "fixed",
  "backgroundType": "color",
  "backgroundColor": {
    "r": 255,
    "g": 255,
    "b": 255,
    "a": 0
  },
  "borderPosition": "inside",
  "borderWidth": 0,
  "borderRadiusT": 0,
  "borderRadiusR": 0,
  "borderRadiusB": 0,
  "borderRadiusL": 0,
  "borderColor": {
    "r": 0,
    "g": 0,
    "b": 0,
    "a": 1
  },
  "shadow": {
    "x": 0,
    "y": 0,
    "blur": 0,
    "spread": 0,
    "color": {
      "r": 0,
      "g": 0,
      "b": 0,
      "a": 0
    }
  },
  "hoveredDir": null,
  "isHovered": false,
  "isSelected": false,
  "centerX": 0,  // Required modification - must contain result from center point calculation formula
  "centerY": 0,  // Required modification - must contain result from center point calculation formula
}
```

## Step 1: Container Setup

The first step in converting an image to blocks is setting up the Container block. The Container serves as the root block for the page, establishing the foundation for the entire layout.

> ðŸ“– **Container Block Details**:
## Container Block Details

### Overview
The Container is the root block of the page. It defines the basic layout of the page and can have Section blocks as children.

### Characteristics
- Root block determining page width and height
- Inherits from Block class with basic layout and styling properties
- Controls alignment and spacing of child elements

### Fixed Properties
#### Type
- `type`: 'CONTAINER' (fixed)
#### Layout Type
- `widthType`: 'fixed' (fixed)
- `heightType`: 'fit' (fixed)
- `position`: 'relative' (fixed)

#### Alignment
- `alignVertical`: 'top' (fixed)
- `alignHorizontal`: 'center' (fixed)

### Main Properties

#### Child Elements
- `children`: Section, SectionRow, SectionCol type blocks
- `gap`: always 0 (not used in Container)

### Special Notes
1. Acts as the root block, determining the overall page layout
2. Can only have Section-type blocks as children
3. Child elements stack vertically with vertical-top and horizontal-center alignment
4. device property is reset to null when width changes
5. gap property is always 0 and not used

### 1.1 Device and Width Setup

Analyze the image and select the most appropriate device and width:

1. Check the image width
2. Select the device from the list below that best matches the image width:
   - iPhone Pro Max â†’ width: 430px
   - iPhone Pro â†’ width: 393px
   - iPhone â†’ width: 390px
   - iPhone SE â†’ width: 375px
   - Galaxy S Ultra â†’ width: 384px
   - Galaxy S â†’ width: 360px

Set the device and width values in the Container accordingly.

The height will be reviewed and adjusted in section 2.4 based on expected height.

### 1.2 Background Setup

Analyze the image background:

1. Solid Color Background
   - Extract the main background color from the image
   - Set as Container's backgroundColor

2. Gradient or Pattern Background
   - Extract the dominant color
   - Set as Container's backgroundColor
   - (Complex backgrounds will be handled in Section blocks)

### 1.3 Child Element Placement Rules

Container uses vertical stacking. Child elements' t(top) values are determined as follows:

1. First child (children[0]): t = 0
2. Second child (children[1]): t = first child's height
3. Third child (children[2]): t = first child's height + second child's height
4. nth child: t = sum of all previous children's heights

Example:
```
children[0]: t = 0, height = 100
children[1]: t = 100, height = 150
children[2]: t = 250, height = 80
```

### Example
```
Input Image:
- Width: 385px
- Background: rgb(255, 255, 255)

Container Setup:
1. Device: Galaxy S Ultra (384px closest to 385px)
2. width: 384px
3. backgroundColor: { r: 255, g: 255, b: 255, a: 1 }
```

```json
{
  "type": "CONTAINER",
  "position": "relative",
  "width": 384,
  "height": 1200, // Total height is sum of sections (to be adjusted later)
  "widthType": "fixed",
  "heightType": "fit",
  "device": "Galaxy S Ultra",
  "t": 0,
  "l": 0,
  "r": 0,
  "b": 0,
  "pt": 0,
  "pr": 0,
  "pb": 0,
  "pl": 0,
  "backgroundType": "color",
  "backgroundColor": {
    "r": 255,
    "g": 255,
    "b": 255,
    "a": 1
  },
  "borderPosition": "inside",
  "borderWidth": 0,
  "borderColor": {
    "r": 0,
    "g": 0,
    "b": 0,
    "a": 1
  },
  "borderRadiusT": 0,
  "borderRadiusR": 0,
  "borderRadiusB": 0,
  "borderRadiusL": 0,
  "shadow": {
    "x": 0,
    "y": 0,
    "blur": 0,
    "spread": 0,
    "color": {
      "r": 0,
      "g": 0,
      "b": 0,
      "a": 0
    }
  },
  "children": []
}
```
## Step 2: Section Col/Row Setup

After setting up the Container, analyze the main sections of the image and divide them into Section Col and Section Row blocks.

> ðŸ“– **Section Col/Row Block Details**:
## Section Col/Row Block Details

### Overview
Section Col and Row are section blocks used as children of Container. They divide the main areas of the page and automatically arrange child elements in column (vertical) or row (horizontal) layout, similar to CSS flexbox.

### Characteristics
- Can only be used as Container's child
- Inherits from Block class with basic layout and styling properties
- Automatically arranges child elements based on layout direction
- Similar to flex-col and flex-row in CSS

### Fixed Properties
#### Layout Type
- `widthType`: 'fill' (fixed) - matches Container width
- `heightType`: 'fit' (fixed) - adjusts to children's height + gap + padding
- `position`: 'absolute' (fixed)

### Main Properties

#### Layout Direction and Alignment
- `gap`: spacing between child elements (px)
- `alignVertical`: 'top' | 'center' | 'bottom' (similar to align-items)
- `alignHorizontal`: 'left' | 'center' | 'right' (similar to justify-content)
- Padding values (pt, pr, pb, pl) for internal spacing

#### Size
- `width`: Same as Container width (auto-set)
- `height`: Calculated automatically = sum(children heights) + (gap Ã— (children.length - 1)) + pt + pb

#### Child Elements
- `children`: Text, Frame type blocks (including nested Frame Col/Row blocks)
- Children are automatically sorted by t, l values (smallest first)

#### Style
- `backgroundColor`: Can be different from Container's background color

### Child Element Arrangement
- Section Col: arranges children vertically (like flex-direction: column)
- Section Row: arranges children horizontally (like flex-direction: row)
- Children are automatically positioned based on gap and alignment settings
- Children with smaller t, l values are positioned first (top/left priority)
- Manual t, l positioning is still needed to define the order of children

### Special Notes
1. Width automatically set to match Container width
2. Height automatically calculated based on children and gap
3. Can have different background color from Container for section distinction
4. Children are auto-arranged based on t, l values for ordering

### 2.1 Section Division

Analyze the image and divide sections based on:

1. Areas with different background colors
2. Areas with clearly distinct content
3. Areas with different layouts
4. Determine if each section needs column (vertical) or row (horizontal) layout

### 2.2 Section Col/Row Property Setup

Set the following properties for each Section:

#### Fixed Properties
- `widthType`: 'fill' (matches Container width)
- `heightType`: 'fit' (adjusts to content)
- `position`: 'absolute'

#### Configurable Properties
- `gap`: Spacing between child elements
- `alignVertical`: Vertical alignment of children
- `alignHorizontal`: Horizontal alignment of children
- `backgroundColor`: Section background color (if different from Container)
- `t`: Position within Container (automatically calculated based on Container's child placement rules)
- Padding values (pt, pr, pb, pl) for internal spacing

### 2.3 Example
```
Image Analysis Results:
- Header section: Column layout, gap = 8px, center aligned
- Main content section: Column layout, gap = 16px, left aligned
- Footer section: Row layout, gap = 12px, center aligned

Section Setup:
(Using Container width = 384px)
1. Header: SECTION_COL, gap = 8, alignHorizontal = "center", alignVertical = "top"
2. Main: SECTION_COL, gap = 16, alignHorizontal = "left", alignVertical = "top"
3. Footer: SECTION_ROW, gap = 12, alignHorizontal = "center", alignVertical = "center"
```

```json
{
  "type": "SECTION_COL",
  "position": "absolute",
  "width": 384,
  "height": 120,
  "widthType": "fill",
  "heightType": "fit",
  "t": 0,
  "l": 0,
  "r": 0,
  "b": 0,
  "pt": 24,
  "pr": 24,
  "pb": 24,
  "pl": 24,
  "gap": 16,
  "alignVertical": "top",
  "alignHorizontal": "center",
  "backgroundType": "color",
  "backgroundColor": { "r": 240, "g": 240, "b": 240, "a": 1 },
  "borderPosition": "inside",
  "borderWidth": 0,
  "borderColor": {
    "r": 0,
    "g": 0,
    "b": 0,
    "a": 0
  },
  "borderRadiusT": 0,
  "borderRadiusR": 0,
  "borderRadiusB": 0,
  "borderRadiusL": 0,
  "shadow": {
    "x": 0,
    "y": 0,
    "blur": 0,
    "spread": 0,
    "color": {
      "r": 0,
      "g": 0,
      "b": 0,
      "a": 0
    }
  },
  "centerX": 192,
  "centerY": 60,
  "children": []
}
```

### 2.4 Container Height Setup
Update the Container's height to the total sum of all Section heights

Example:
```
1. Header: SECTION_COL, width = 384, height = 120, backgroundColor = { r: 240, g: 240, b: 240, a: 1 }, t = 0
2. Main: SECTION_COL, width = 384, height = 400, backgroundColor = { r: 255, g: 255, b: 255, a: 1 }, t = 120
3. Footer: SECTION_ROW, width = 384, height = 80, backgroundColor = { r: 50, g: 50, b: 50, a: 1 }, t = 520
```

Container height = 600

## Step 3: Adding Section Internal Elements

After setting up Section Col/Row blocks, add Frame and Text elements as children.

1. When Frame Col/Row is needed:
   - Add Frame Col/Row to Section's children
   - Place Text blocks inside Frame Col/Row
   - Frame will be auto-positioned within Section based on alignment

2. When Frame Col/Row is not needed:
   - Add Text blocks directly to Section's children
   - Text will be auto-positioned within Section based on alignment

### 3.1 Frame Col/Row Setup

First, identify areas within Section that need Frame Col/Row based on borders, background colors, or grouping requirements.

#### Frame Col/Row Characteristics
- Added as children of Section Col/Row
- Acts as parent for Text blocks
- Automatically arranges child elements in column or row layout
- Similar to nested flexbox containers

#### Layout Rules
- If parent is Section Col: Frame's `widthType` defaults to 'fill'
- If parent is Section Row: Frame's `heightType` defaults to 'fill'
- Children are automatically positioned based on gap and alignment, but t, l values determine the order

#### Configurable Properties
- `widthType`: 'fixed' | 'fill' | 'fit'
- `heightType`: 'fixed' | 'fill' | 'fit'
- `gap`: spacing between child elements
- `alignVertical`: 'top' | 'center' | 'bottom'
- `alignHorizontal`: 'left' | 'center' | 'right'
- `backgroundType`: 'color' (default: 'color')
- `backgroundColor`: background color (default: { r: 255, g: 255, b: 255, a: 0 })
- `borderPosition`: 'inside' | 'outside' (default: 'inside')
- `borderWidth`: border thickness (default: 0)
- `borderColor`: border color (default: { r: 0, g: 0, b: 0, a: 1 })
- `borderRadiusT`: top border radius (default: 0)
- `borderRadiusR`: right border radius (default: 0)
- `borderRadiusB`: bottom border radius (default: 0)
- `borderRadiusL`: left border radius (default: 0)
- `shadow`: shadow effect (default: { x: 0, y: 0, blur: 0, spread: 0, color: { r: 0, g: 0, b: 0, a: 1 } })
- Padding values (pt, pr, pb, pl) for internal spacing

#### Frame Col Example
```json
{
  "type": "FRAME_COL",
  "position": "absolute",
  "width": 336,
  "height": 120,
  "widthType": "fill",
  "heightType": "fit",
  "t": 0,
  "l": 0,
  "r": 0,
  "b": 0,
  "pt": 16,
  "pr": 16,
  "pb": 16,
  "pl": 16,
  "gap": 8,
  "alignVertical": "top",
  "alignHorizontal": "left",
  "backgroundType": "color",
  "backgroundColor": {
    "r": 255,
    "g": 255,
    "b": 255,
    "a": 1
  },
  "borderPosition": "inside",
  "borderWidth": 1,
  "borderColor": {
    "r": 0,
    "g": 0,
    "b": 0,
    "a": 0.1
  },
  "borderRadiusT": 8,
  "borderRadiusR": 8,
  "borderRadiusB": 8,
  "borderRadiusL": 8,
  "shadow": {
    "x": 0,
    "y": 2,
    "blur": 4,
    "spread": 0,
    "color": {
      "r": 0,
      "g": 0,
      "b": 0,
      "a": 0.1
    }
  },
  "centerX": 168,
  "centerY": 60,
  "children": []
}
```

#### Frame Row Example
```json
{
  "type": "FRAME_ROW",
  "position": "absolute",
  "width": 336,
  "height": 48,
  "widthType": "fill",
  "heightType": "fit",
  "t": 0,
  "l": 0,
  "r": 0,
  "b": 0,
  "pt": 12,
  "pr": 16,
  "pb": 12,
  "pl": 16,
  "gap": 12,
  "alignVertical": "center",
  "alignHorizontal": "left",
  "backgroundType": "color",
  "backgroundColor": {
    "r": 248,
    "g": 249,
    "b": 250,
    "a": 1
  },
  "borderPosition": "inside",
  "borderWidth": 0,
  "borderColor": {
    "r": 0,
    "g": 0,
    "b": 0,
    "a": 1
  },
  "borderRadiusT": 6,
  "borderRadiusR": 6,
  "borderRadiusB": 6,
  "borderRadiusL": 6,
  "shadow": {
    "x": 0,
    "y": 0,
    "blur": 0,
    "spread": 0,
    "color": {
      "r": 0,
      "g": 0,
      "b": 0,
      "a": 0
    }
  },
  "centerX": 168,
  "centerY": 24,
  "children": []
}
```

#### Frame Col/Row Checklist
- Check for border edges and add borderWidth and borderColor if present
- Check for rounded corners and add borderRadius for each direction if present
- Check for background color and add backgroundColor if present
- Determine if children should be arranged in column or row
- Set appropriate gap and alignment values

### 3.2 Text Block Setup

Text blocks display text content and can now use 'fill' widthType/heightType options when inside Col/Row containers.

#### Text Block Unique Properties
- `content`: Pure text content (use <br/> tag for line breaks)
- `fontName`: Font name (select from fonts array in typography.ts)
- `fontWeight`: Font weight (select from supported weights for chosen fontName)
- `fontColor`: Text color (RGBA)
- `fontSize`: Font size (px)
- `letterSpacing`: Letter spacing (px)
- `lineHeight`: Line height (em)
- `textAlign`: Text alignment ('left' | 'center' | 'right')
- `textShadow`: Text shadow

#### Size Options in Col/Row Containers
- `widthType`: 'fixed' | 'fill' | 'fit'
  - 'fill': Takes full width of parent container
  - 'fit': Adjusts to text content width
  - 'fixed': Uses exact width value
- `heightType`: 'fixed' | 'fill' | 'fit'
  - 'fill': Takes full height of parent container
  - 'fit': Adjusts to text content height
  - 'fixed': Uses exact height value

#### Content Structure
Text block content is pure text with <br/> tags for line breaks:
```text
First line<br/>
Second line<br/>
Third line
```

#### Text Block Example (with fill width)
```json
{
  "type": "TEXT",
  "position": "absolute",
  "width": 304,  // Will be recalculated when widthType is 'fill'
  "height": 24,  // Actual calculated height
  "widthType": "fill",
  "heightType": "fit",
  "t": 0,
  "l": 0,
  "r": 0,
  "b": 0,
  "pt": 0,
  "pr": 0,
  "pb": 0,
  "pl": 0,
  "content": "Sample text with fill width",
  "fontName": "Pretendard",
  "fontWeight": 700,
  "fontColor": {
    "r": 0,
    "g": 0,
    "b": 0,
    "a": 1
  },
  "fontSize": 16,
  "letterSpacing": -0.5,
  "lineHeight": 1.5,
  "textAlign": "left",
  "textShadow": {
    "x": 0,
    "y": 0,
    "blur": 0,
    "color": {
      "r": 0,
      "g": 0,
      "b": 0,
      "a": 0
    }
  },
  "backgroundType": "color",
  "backgroundColor": {
    "r": 255,
    "g": 255,
    "b": 255,
    "a": 0
  },
  "borderPosition": "inside",
  "borderWidth": 0,
  "borderColor": {
    "r": 0,
    "g": 0,
    "b": 0,
    "a": 1
  },
  "borderRadiusT": 0,
  "borderRadiusR": 0,
  "borderRadiusB": 0,
  "borderRadiusL": 0,
  "shadow": {
    "x": 0,
    "y": 0,
    "blur": 0,
    "spread": 0,
    "color": {
      "r": 0,
      "g": 0,
      "b": 0,
      "a": 0
    }
  },
  "centerX": 152,
  "centerY": 12
}
```

#### Positioning in Col/Row Containers
- Text blocks inside Col/Row containers are automatically positioned
- No manual t, l calculation needed
- Position is determined by parent's alignment and gap settings
- Use widthType: 'fill' to take full width of parent
- Use heightType: 'fit' to adjust to content height

#### Font Selection Guide

Choose appropriate fonts from typography.ts:

1. Title Fonts:
   - Paperlogy (500, 600, 700) - recommended
   - GmarketSans (300, 500, 700)
   - KakaoBigSans (400, 700, 800)

2. Body Text Fonts:
   - Pretendard (100-900) - recommended
   - LINESeedSansKR (100, 400, 700)
   - GowunBatang (400, 700)

3. Special Purpose Fonts:
   - SDKukdetopokki (400) - Cute style
   - Ownglyph_ParkDaHyun (400) - Handwriting
   - Independence_hall (400) - Classical style

#### Text Block Checklist
- Choose appropriate widthType/heightType (fixed, fill, or fit)
- Check for border edges and add borderWidth and borderColor if present
- Check for rounded corners and add borderRadius for each direction if present
- Check for background color and add backgroundColor if present
- Add <br /> tags where line breaks appear in the image
- Create separate text blocks for consecutive text with different colors or sizes

## Step 4: Design
Design empty spaces where icons or images cannot be generatedâ€”to harmonize with the surrounding elements.
If there is an image that cannot be directly replicated, you must replace it with an appropriate design element to preserve the overall layout and visual balance.

You may create design elements such as Cards (a frame with text), Buttons (text with border, padding, and background), or any other components as needed.
Once you're finished, make sure to review both the Text Block Checklist and the Frame Col/Row Checklist.

At this step, you may rearrange horizontally laid-out elements into a vertical layout to better suit the screen size differences.

## Step 5: Adjustment
After setting up Text and Frame blocks, review and fine-tune the overall layout.

### 5-1 Layout Review
- Child elements in Col/Row containers are automatically positioned, but verify alignment and gap settings
- Check if widthType/heightType settings are appropriate for each element
- Verify that fit and fill calculations work correctly within the layout
- Elements should not overflow their containers

If adjustments are needed, proceed to 5-2; otherwise, finish.

### 5-2 Layout Adjustment
- Adjust gap values between child elements
- Modify alignment settings (alignVertical, alignHorizontal)
- Change widthType/heightType values as needed:
  - Use 'fill' for elements that should take full width/height
  - Use 'fit' for elements that should adjust to content size
  - Use 'fixed' for elements with specific dimensions
- Adjust padding values (pt, pr, pb, pl) for better spacing

### 5-3 Review Again
Return to 5-1 for another review.
