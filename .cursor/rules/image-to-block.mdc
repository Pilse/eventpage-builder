---
description: 
globs: 
alwaysApply: true
---
# Converting Images to Blocks

- Goal: Extract text, layout, and styles from the target image to construct block-based JSON

> ðŸ“– **Basic Information for All Blocks**: 

## Block Class Basic Properties and Default Values

### Position Related
- `position`: 'relative' | 'absolute' (default: 'absolute')
- `t`: top position value (default: 0)
- `l`: left position value (default: 0)
- `r`: right position value (default: 0)
- `b`: bottom position value (default: 0)
- `pt`: padding-top (default: 0)
- `pr`: padding-right (default: 0)
- `pb`: padding-bottom (default: 0)
- `pl`: padding-left (default: 0)
- `centerX`: center X (requires calculation, default: width/2 or see formula)
- `centerY`: center Y (requires calculation, default: height/2 or see formula)

### Size Related
- `width`: block width (default: 100)
- `height`: block height (default: 100)
- `widthType`: 'fixed' | 'fill' | 'fit' (default: 'fixed')
- `heightType`: 'fixed' | 'fill' | 'fit' (default: 'fixed')

### Style Related
- `backgroundType`: 'color' (default: 'color')
- `backgroundColor`: background color (default: { r: 255, g: 255, b: 255, a: 0 })
- `borderPosition`: 'inside' | 'outside' (default: 'inside')
- `borderWidth`: border thickness (default: 0)
- `borderColor`: border color (default: { r: 0, g: 0, b: 0, a: 1 })
- `borderRadiusT`: top border radius (default: 0)
- `borderRadiusR`: right border radius (default: 0)
- `borderRadiusB`: bottom border radius (default: 0)
- `borderRadiusL`: left border radius (default: 0)
- `shadow`: shadow effect (default: { x: 0, y: 0, blur: 0, spread: 0, color: { r: 0, g: 0, b: 0, a: 1 } })

#### Center Point Calculation Formula
- `centerX` and `centerY` must be calculated manually:
  - Without parent: _centerX = width / 2, _centerY = height / 2
  - With parent: _centerX = parent.width / 2 - (l + width / 2), _centerY = parent.height / 2 - (t + height / 2)

### Important: Default Values
All blocks must include these default values and update specified properties according to the guide.
Example: 
```json
{
  "t": 0,
  "r": 0,
  "b": 0,
  "l": 0,
  "pt": 0,
  "pr": 0,
  "pb": 0,
  "pl": 0,
  "type": null,
  "position": "absolute",
  "parent": null,
  "width": 100,
  "height": 100,
  "xDirection": "l",
  "yDirection": "t",
  "prevOffset": {
    "x": 0,
    "y": 0
  },
  "widthType": "fixed",
  "heightType": "fixed",
  "backgroundType": "color",
  "backgroundColor": {
    "r": 255,
    "g": 255,
    "b": 255,
    "a": 0
  },
  "borderPosition": "inside",
  "borderWidth": 0,
  "borderRadiusT": 0,
  "borderRadiusR": 0,
  "borderRadiusB": 0,
  "borderRadiusL": 0,
  "borderColor": {
    "r": 0,
    "g": 0,
    "b": 0,
    "a": 1
  },
  "shadow": {
    "x": 0,
    "y": 0,
    "blur": 0,
    "spread": 0,
    "color": {
      "r": 0,
      "g": 0,
      "b": 0,
      "a": 0
    }
  },
  "hoveredDir": null,
  "isHovered": false,
  "isSelected": false,
  "centerX": 0,  // Required modification - must contain result from center point calculation formula
  "centerY": 0,  // Required modification - must contain result from center point calculation formula
}
```

## Step 1: Container Setup

The first step in converting an image to blocks is setting up the Container block. The Container serves as the root block for the page, establishing the foundation for the entire layout.

> ðŸ“– **Container Block Details**:
## Container Block Details

### Overview
The Container is the root block of the page. It defines the basic layout of the page and can have Section blocks as children.

### Characteristics
- Root block determining page width and height
- Inherits from Block class with basic layout and styling properties
- Controls alignment and spacing of child elements

### Fixed Properties
#### Type
- `type`: 'CONTAINER' (fixed)
#### Layout Type
- `widthType`: 'fixed' (fixed)
- `heightType`: 'fit' (fixed)
- `position`: 'relative' (fixed)

#### Alignment
- `alignVertical`: 'top' (fixed)
- `alignHorizontal`: 'center' (fixed)

### Main Properties

#### Child Elements
- `children`: Section, SectionRow, SectionCol type blocks
- `gap`: always 0 (not used in Container)

### Special Notes
1. Acts as the root block, determining the overall page layout
2. Can only have Section-type blocks as children
3. Child elements stack vertically with vertical-top and horizontal-center alignment
4. device property is reset to null when width changes
5. gap property is always 0 and not used

### 1.1 Device and Width Setup

Analyze the image and select the most appropriate device and width:

1. Check the image width
2. Select the device from the list below that best matches the image width:
   - iPhone Pro Max â†’ width: 430px
   - iPhone Pro â†’ width: 393px
   - iPhone â†’ width: 390px
   - iPhone SE â†’ width: 375px
   - Galaxy S Ultra â†’ width: 384px
   - Galaxy S â†’ width: 360px

Set the device and width values in the Container accordingly.

The height will be reviewed and adjusted in section 2.4 based on expected height.

### 1.2 Background Setup

Analyze the image background:

1. Solid Color Background
   - Extract the main background color from the image
   - Set as Container's backgroundColor

2. Gradient or Pattern Background
   - Extract the dominant color
   - Set as Container's backgroundColor
   - (Complex backgrounds will be handled in Section blocks)

### 1.3 Child Element Placement Rules

Container uses vertical stacking. Child elements' t(top) values are determined as follows:

1. First child (children[0]): t = 0
2. Second child (children[1]): t = first child's height
3. Third child (children[2]): t = first child's height + second child's height
4. nth child: t = sum of all previous children's heights

Example:
```
children[0]: t = 0, height = 100
children[1]: t = 100, height = 150
children[2]: t = 250, height = 80
```

### Example
```
Input Image:
- Width: 385px
- Background: rgb(255, 255, 255)

Container Setup:
1. Device: Galaxy S Ultra (384px closest to 385px)
2. width: 384px
3. backgroundColor: { r: 255, g: 255, b: 255, a: 1 }
```

```json
{
  "type": "CONTAINER",
  "position": "relative",
  "width": 384,
  "height": 1200, // Total height is sum of sections (to be adjusted later)
  "widthType": "fixed",
  "heightType": "fit",
  "device": "Galaxy S Ultra",
  "t": 0,
  "l": 0,
  "r": 0,
  "b": 0,
  "pt": 0,
  "pr": 0,
  "pb": 0,
  "pl": 0,
  "backgroundType": "color",
  "backgroundColor": {
    "r": 255,
    "g": 255,
    "b": 255,
    "a": 1
  },
  "borderPosition": "inside",
  "borderWidth": 0,
  "borderColor": {
    "r": 0,
    "g": 0,
    "b": 0,
    "a": 1
  },
  "borderRadiusT": 0,
  "borderRadiusR": 0,
  "borderRadiusB": 0,
  "borderRadiusL": 0,
  "shadow": {
    "x": 0,
    "y": 0,
    "blur": 0,
    "spread": 0,
    "color": {
      "r": 0,
      "g": 0,
      "b": 0,
      "a": 0
    }
  },
  "children": []
}
```
## Step 2: Section Canvas Setup

After setting up the Container, analyze the main sections of the image and divide them into Section Canvas blocks.

> ðŸ“– **Section Canvas Block Details**:
## Section Canvas Block Details

### Overview
Section Canvas is a section block used as a child of Container. It divides the main areas of the page and serves as a reference point for placing Frame, Text, and other elements.

### Characteristics
- Can only be used as Container's child
- Inherits from Block class with basic layout and styling properties
- Acts as placement reference for child elements

### Fixed Properties
#### Layout Type
- `widthType`: 'fill' (fixed) - matches Container width
- `heightType`: 'fixed' (fixed) - can be set to desired height
- `position`: 'absolute' (fixed)

### Main Properties

#### Size
- `width`: Same as Container width (auto-set)
- `height`: Set to desired height

#### Child Elements
- `children`: Text, Frame type blocks

#### Style
- `backgroundColor`: Can be different from Container's background color

### Child Element Placement
Section Canvas acts as a canvas for freely placing child elements. Child elements can be positioned using t, l values.

### Special Notes
1. Width automatically set to match Container width
2. Height can be freely set to desired value
3. Can have different background color from Container for section distinction
4. Serves as reference point for child element placement

### 2.1 Section Division

Analyze the image and divide sections based on:

1. Areas with different background colors
2. Areas with clearly distinct content
3. Areas with different layouts

### 2.2 Section Canvas Property Setup

Set the following properties for each Section Canvas:

#### Fixed Properties
- `widthType`: 'fill' (matches Container width)
- `heightType`: 'fixed' (set to desired height)
- `position`: 'absolute'

#### Configurable Properties
- `height`: Section height (measured from image)
- `backgroundColor`: Section background color (if different from Container)
- `t`: Position within Container (automatically calculated based on Container's child placement rules)

### 2.3 Example
```
Image Analysis Results:
- Header section: height = 80px, backgroundColor = rgb(240, 240, 240)
- Main content section: height = 400px, backgroundColor = rgb(255, 255, 255)
- Footer section: height = 60px, backgroundColor = rgb(50, 50, 50)

Section Canvas Setup:
(Using Container width = 384px)
1. Header: width = 384, height = 80, backgroundColor = { r: 240, g: 240, b: 240, a: 1 }, t = 0
2. Main: width = 384, height = 400, backgroundColor = { r: 255, g: 255, b: 255, a: 1 }, t = 80
3. Footer: width = 384, height = 60, backgroundColor = { r: 50, g: 50, b: 50, a: 1 }, t = 480
```

```json
{
  "type": "SECTION_CANVAS",
  "position": "absolute",
  "width": 384,
  "height": 80,
  "widthType": "fill",
  "heightType": "fixed",
  "t": 0,
  "l": 0,
  "r": 0,
  "b": 0,
  "pt": 0,
  "pr": 0,
  "pb": 0,
  "pl": 0,
  "backgroundType": "color",
  "backgroundColor": { "r": 240, "g": 240, "b": 240, "a": 1 },
  "borderPosition": "inside",
  "borderWidth": 0,
  "borderColor": {
    "r": 0,
    "g": 0,
    "b": 0,
    "a": 0
  },
  "borderRadiusT": 0,
  "borderRadiusR": 0,
  "borderRadiusB": 0,
  "borderRadiusL": 0,
  "shadow": {
    "x": 0,
    "y": 0,
    "blur": 0,
    "spread": 0,
    "color": {
      "r": 0,
      "g": 0,
      "b": 0,
      "a": 0
    }
  },
  "children": []
}
```

### 2.4 Container Height Setup
Update the Container's height to the total sum of all Section Canvas heights

Example:
```
1. Header: width = 384, height = 80, backgroundColor = { r: 240, g: 240, b: 240, a: 1 }, t = 0
2. Main: width = 384, height = 400, backgroundColor = { r: 255, g: 255, b: 255, a: 1 }, t = 80
3. Footer: width = 384, height = 60, backgroundColor = { r: 50, g: 50, b: 50, a: 1 }, t = 480
```

Container height = 560

## Step 3: Adding Section Canvas Internal Elements

After setting up Section Canvas blocks, iterate through each section to add Frame and Text elements.

1. When Frame Canvas is needed:
   - Add Frame Canvas to Section Canvas's children
   - Place Text blocks inside Frame Canvas
   - Set Text position (t, l) relative to Frame Canvas

2. When Frame Canvas is not needed:
   - Add Text blocks directly to Section Canvas's children
   - Set Text position (t, l) relative to Section Canvas

### 3.1 Frame Canvas Setup

First, identify areas within Section Canvas that need Frame Canvas based on borders, background colors, or grouping requirements.

#### Frame Canvas Characteristics
- Shares same properties and settings as Section Canvas
- Added as children of Section Canvas
- Acts as parent for Text blocks

#### Configurable Properties
- `backgroundType`: 'color' (default: 'color')
- `backgroundColor`: background color (default: { r: 255, g: 255, b: 255, a: 0 })
- `borderPosition`: 'inside' | 'outside' (default: 'inside')
- `borderWidth`: border thickness (default: 0)
- `borderColor`: border color (default: { r: 0, g: 0, b: 0, a: 1 })
- `borderRadiusT`: top border radius (default: 0)
- `borderRadiusR`: right border radius (default: 0)
- `borderRadiusB`: bottom border radius (default: 0)
- `borderRadiusL`: left border radius (default: 0)
- `shadow`: shadow effect (default: { x: 0, y: 0, blur: 0, spread: 0, color: { r: 0, g: 0, b: 0, a: 1 } })
- `width`: block width (default: 100)
- `height`: block height (default: 100)
- `t`: top position value (default: 0)
- `l`: left position value (default: 0)
- `r`: right position value (default: 0)
- `b`: bottom position value (default: 0)

#### Frame Canvas Example
```json
{
  "type": "FRAME_CANVAS",
  "position": "absolute",
  "width": 335,
  "height": 120,
  "widthType": "fixed",
  "heightType": "fixed",
  "t": 20,
  "l": 20,
  "r": 20,
  "b": 0,
  "pt": 16,
  "pr": 16,
  "pb": 16,
  "pl": 16,
  "backgroundType": "color",
  "backgroundColor": {
    "r": 255,
    "g": 255,
    "b": 255,
    "a": 1
  },
  "borderPosition": "inside",
  "borderWidth": 1,
  "borderColor": {
    "r": 0,
    "g": 0,
    "b": 0,
    "a": 0.1
  },
  "borderRadiusT": 8,
  "borderRadiusR": 8,
  "borderRadiusB": 8,
  "borderRadiusL": 8,
  "shadow": {
    "x": 0,
    "y": 2,
    "blur": 4,
    "spread": 0,
    "color": {
      "r": 0,
      "g": 0,
      "b": 0,
      "a": 0.1
    }
  },
  "children": []
}
```

#### Layout Guide
- To center horizontally: l = parent's width / 2 - self width / 2
- To center vertically: t = parent's height / 2 - self height / 2

#### Frame Canvas Checklist
- Check for border edges and add borderWidth and borderColor if present
- Check for rounded corners and add borderRadius for each direction if present
- Check for background color and add backgroundColor if present

### 3.2 Text Block Setup

Text blocks display text content.
Always use Text blocks for any text elements, using backgroundColor and border properties to match the design.

#### Text Block Unique Properties
- `content`: Pure text content (use <br/> tag for line breaks)
- `fontName`: Font name (select from fonts array in typography.ts)
- `fontWeight`: Font weight (select from supported weights for chosen fontName)
- `fontColor`: Text color (RGBA)
- `fontSize`: Font size (px)
- `letterSpacing`: Letter spacing (px)
- `lineHeight`: Line height (em)
- `textAlign`: Text alignment ('left' | 'center' | 'right')
- `textShadow`: Text shadow

#### Size Calculation
- `width`: Actual pixel value (calculated based on content width)
- `height`: Actual pixel value (calculated based on content height)
- `widthType`: 'fit' (default) - fits to content width
- `heightType`: 'fit' (default) - fits to content height

#### Content Structure
Text block content is pure text with <br/> tags for line breaks:
```text
First line<br/>
Second line<br/>
Third line
```

#### Text Block Example
```json
{
  "type": "TEXT",
  "position": "absolute",
  "width": 335,  // Actual calculated width
  "height": 48,  // Actual calculated height
  "widthType": "fit",
  "heightType": "fit",
  "t": 0,
  "l": 0,
  "r": 0,
  "b": 0,
  "content": "Sample text<br/>Second line",
  "fontName": "Pretendard",
  "fontWeight": 700,
  "fontColor": {
    "r": 0,
    "g": 0,
    "b": 0,
    "a": 1
  },
  "fontSize": 24,
  "letterSpacing": 0,
  "lineHeight": 1.5,
  "textAlign": "left",
  "textShadow": {
    "x": 0,
    "y": 0,
    "blur": 0,
    "color": {
      "r": 0,
      "g": 0,
      "b": 0,
      "a": 0
    }
  },
  "backgroundType": "color",
  "backgroundColor": {
    "r": 255,
    "g": 255,
    "b": 255,
    "a": 0
  },
  "borderPosition": "inside",
  "borderWidth": 0,
  "borderColor": {
    "r": 0,
    "g": 0,
    "b": 0,
    "a": 1
  },
  "borderRadiusT": 0,
  "borderRadiusR": 0,
  "borderRadiusB": 0,
  "borderRadiusL": 0,
  "shadow": {
    "x": 0,
    "y": 0,
    "blur": 0,
    "spread": 0,
    "color": {
      "r": 0,
      "g": 0,
      "b": 0,
      "a": 0
    }
  }
}
```

#### Layout Guide
- To center horizontally: l = parent's width / 2 - self width / 2
- To center vertically: t = parent's height / 2 - self height / 2

#### Font Selection Guide

Choose appropriate fonts from typography.ts:

1. Title Fonts:
   - Paperlogy (500, 600, 700)
   - GmarketSans (300, 500, 700)
   - KakaoBigSans (400, 700, 800)

2. Body Text Fonts:
   - Pretendard (100-900)
   - LINESeedSansKR (100, 400, 700)
   - GowunBatang (400, 700)

3. Special Purpose Fonts:
   - SDKukdetopokki (400) - Cute style
   - Ownglyph_ParkDaHyun (400) - Handwriting
   - Independence_hall (400) - Classical style

#### Text Block Checklist
- Check for border edges and add borderWidth and borderColor if present
- Check for rounded corners and add borderRadius for each direction if present
- Check for background color and add backgroundColor if present
- Add <br /> tags where line breaks appear in the image
- Create separate text blocks for consecutive text with different colors or sizes

## Step 4: Design
Design empty spaces where icons or images cannot be generated to match the surrounding elements.

### 4-1 Background Colors
Replace areas with distinct image backgrounds with appropriate background colors.

### 4-2 Icons
Leave empty spaces where icons were used in the original design.

### 4-3 Other Elements
Use creative judgment to design other elements to maintain visual harmony.

## Step 5: Adjustment
After setting up Text and Frame blocks, review and fine-tune the overall layout.

### 5-1 Layout Review
- Child elements cannot exceed parent's width or height. If child's l + width or t + height exceeds parent's width or height, adjustment is needed.
- Elements cannot overlap. If l + width or t + height calculations overlap with sibling's l or t, adjustment is needed.
If adjustments are needed, proceed to 5-2; otherwise, finish.

### 5-2 Layout Adjustment
- Increase parent's width and height to contain all children. Largest width is determined by maximum l + width, largest height by maximum t + height.
- Adjust sibling t, l values to prevent overlap.
- To center horizontally: l = parent's width / 2 - self width / 2
- To center vertically: t = parent's height / 2 - self height / 2

### 5-3 Review Again
Return to 5-1 for another review.
